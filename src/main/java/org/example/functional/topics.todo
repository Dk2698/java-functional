Understanding Functional Programming
Venkat Subramaniam
Email: venkats@agiledeveloper.com
Twitter: @venkat_s
http://www.agiledeveloper.com download link

Part 1: Thinking in a functional style:
✔imperative
✔declarative
✔higher-order functions
✔functional == declarative + higher-order functional
✔thinking declaratively, as a series of transformations
✔Just like the contains function, look for (higher-order) functions that abstract operations
✔let's refactor some code
✔review and discussions

code/part1/lab directory
readme.txt
open the code/part1/lab directory directly in IntelliJ IDEA
Please run the tests and make sure they all pass
Then refactor the code to functional style
Run the tests and make sure they all pass

Part 2:Exploring functional APIs:
✔filter
✔map
✔reduce
✔collect
✔functional style == functional composition
✔ functional programming == functional composition + lazy evaluation
  https://twitter.com/venkat_s/status/1440342004177670162
✔lambdas vs. closures
✔purity of functions
✔lambdas are glue code
  http://blog.agiledeveloper.com/2015/06/lambdas-are-glue-code.html
✔let's refactor some code
✔review and discussions

Part 3:map versus flatMap:
✔map
✔one to one functions
✔one to many functions
✔flatten in other languages
✔map and flatten
✔let's refactor some code
✔review and discussions